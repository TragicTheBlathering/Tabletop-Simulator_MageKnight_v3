--******************************************************************************
-- Function Storage ------------------------------------------------------------
local setButtons = {} -- SetButton Functionsd
local tool = {} -- Various Tools (definitions at bottom of script)
--******************************************************************************
-- Variables : Script Wide -----------------------------------------------------
local ShowCast = true
local printBug = false
local functionStopped = {resetDecks = false, drawCards = false, clearOffer = false}
local gameSettings = {
        unitOfferCount=nil, blitz=nil, playerCount=nil, plusTwo=2, set=false -- Player Set : Units = Player Count + 2 + (blitz) (Blitz == +1, volkaire = +1, if both on then +2)
    }
--gameSettings.unitOfferCount
local unitOffer = { --unitOffer.overflowValues{total=nil, silver=0, gold=0, overflow=false},
    gold = {on = false, char=nil, pos=nil, ticked={char='9673', pos=Vector(-2.6,0.5,-0.115)}, unticked={char='9678', pos=Vector(-2.6,0.5,-0.14)}},
    automatic = {on=true, tooltip='Automatic Gold Units : ON\n(right click to remove button)', col='White', buttonRemoved=false},
    overflowValues = {total=nil, silver=0, gold=0, overflow=false},
    overflow = false,
    drawType = {'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver'},
    }

local cardData = { --cardData.cardOfferPos
    cardOfferPos = { -- Position of cards in the offer
            Vector(56.50, 2.02, -13.98),
            Vector(49.50, 2.02, -13.98),
            Vector(42.50, 2.02, -13.98),
            Vector(35.50, 2.02, -13.99),
            Vector(28.50, 2.02, -13.99),
            Vector(21.50, 2.02, -13.99),
            Vector(14.50, 2.02, -13.99),
            vector(7.50, 2.02, -13.99)
        },
     face = {up = Vector(0, 180, 0), down = Vector(0, 180, 180)}, -- alias for flipping cards face up or down
     drawDecks = { -- drawDeck positon to search and if the deck if found or not
            silver={deck=false, pos=Vector(63.50, 2.02, -13.97)},
            gold  ={deck=false, pos=Vector(63.50, 2.02, -21.97)}
        },
    discardDecks = { -- discardDeck positon to search and if the deck if found or not
            silver={deck=false, pos=Vector(70.50, 2.01, -13.97)},
            gold  ={deck=false, pos=Vector(70.50, 2.01, -21.97)}
        },
    dropOffSet = Vector(0, 2, 0), -- value for vertical offset when dealing cards
    currentOffer = {false, false, false, false, false, false, false, false} -- the offer itself.
} -- End cardData = {}

function onLoad(saved_data)
    print('New Version')
    setButtons.init()
end

--******************************************************************************
---- Process Offer -------------------------------------------------------------
function b_mainDrawFunction(obj, color, alt_click)
    setButtons.disableButtons()
    setGameState()
    clearOffer()
    waitFunc(resetDecks, 'clearOffer')
    waitFunc(drawCards, 'resetDecks')
    waitFunc(resetDecks, 'drawCards')
    waitFunc(drawCards, 'resetDecks')
    waitFunc(setButtons.init, 'drawCards')
end

function setGameState(...)

    --local coreTiles = getObjectsWithTag('maptile_Core')
    --coreTiles = tool.tableSize(coreTiles)
    --print(coreTiles)
    if tool.tableSize(getObjectsWithTag('maptile_Core')) > 1 then
        print('!!!')
    end


    if not gameSettings.set or not unitOffer then gameSettings.init() end
    local keys = {...}
    if tool.tableSize(keys) == 0 then
        keys = false
    end
    if keys == false then
        setState('currentOffer')
        setState('decks')
        setState('drawType')
    else
        for k, key in pairs(keys) do
            setState(key)
        end
    end
    return cardData
end

function setState(key)
    if key == 'currentOffer' then
     --- Find Offer Cards
        for k,castOrigin in ipairs(cardData.cardOfferPos) do
            cardData.currentOffer[k] = cast(castOrigin)
        end

    elseif key == 'decks' then --drawDecks.silver.pos drawDecks.silver.deck
        cardData.drawDecks.silver.deck = cast(cardData.drawDecks.silver.pos)
        cardData.drawDecks.gold.deck = cast(cardData.drawDecks.gold.pos)

        cardData.discardDecks.silver.deck = cast(cardData.discardDecks.silver.pos)
        cardData.discardDecks.gold.deck = cast(cardData.discardDecks.gold.pos)
    elseif key == 'drawType' then
        --print(unitOffer.current.gold)
        if unitOffer.gold.on then
            unitOffer.drawType = {'gold', 'silver', 'gold', 'silver', 'gold', 'silver', 'gold', 'silver'}
        else
            unitOffer.drawType = {'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver', 'silver'}
        end
    end
end

function clearOffer()
    waitForFunction('allStop')

    local currentOffer = cardData.currentOffer
    local discardDecks = cardData.discardDecks
    local discard = {silver=discardDecks.silver.deck, gold=discardDecks.gold.deck}
    local offset = {silver=Vector(0,0,0), gold=Vector(0,0,0),}
        for k,deck in pairs(discard) do
            if deck then
                offset[k] = Vector(0,deck.getBounds().size.y/2+0.2,0)
            end
        end
    local pos = {silver=discardDecks.silver.pos+offset.silver, gold=discardDecks.gold.pos+offset.gold}
    local overflow = unitOffer.overflow

    if not overflow then
        local Y ={silver=0, gold=0}
        for k,card in ipairs(currentOffer) do
            if card then
                local type = setGoldSilver(card)
                if type then
                    card.setPositionSmooth(pos[type]+Vector(0,Y[type],0))
                    Y[type] = Y[type] + 0.5
                    if not discard[type] then
                        discard[type] = card
                        Wait.condition(function()
                            discard[type].setPosition(pos[type])--cardData.discardPilePos 32.92, 2.02, -31.23
                        end, function() return isSmooth(card) end)
                    else
                        Wait.condition(function()
                            discard[type] = discard[type].putObject(card)
                        end, function() return isSmooth(card) end)
                    end
                end
            end
        end
        Wait.condition(function() functionStopped.clearOffer = true end, function() return objectsAreMoving(currentOffer) end)
    else
        functionStopped.clearOffer = true
    end
end

function resetDecks()
    waitForFunction('allStop')
    setGameState('decks')

    --print(logString(unitOffer.overflowValues, 'unitOffer.overflowValues'))
    local discard = {silver=cardData.discardDecks.silver.deck, gold=cardData.discardDecks.gold.deck, process={}} --print(logString(discard, 'discard'))
    local draw = {silver=cardData.drawDecks.silver.deck, gold=cardData.drawDecks.gold.deck} --print(logString(draw, 'draw'))
    local pos = {silver=cardData.drawDecks.silver.pos, gold=cardData.drawDecks.gold.pos} --print(logString(pos, 'pos'))
    local rot = cardData.face --print(logString(rot, 'rot'))
    local offset = cardData.dropOffSet --print(logString(offset, 'offset'))
    local size = {silver=Vector(0,0,0), gold=Vector(0,0,0)} --print(logString(size, 'size'))

    if discard.silver then size.silver = Vector(0,discard.silver.getBounds().size.y/2,0) end
    if discard.gold then size.gold = Vector(0,discard.gold.getBounds().size.y/2,0) end

    if not draw.silver then
        if discard.silver then
            discard.process.silver = discard.silver
        else
            printToAll('ERROR : Um.. I can not find any Silver Unit cards at all?! ', 'Red')
        end
    end

    if not draw.gold then
        if discard.gold then
            discard.process.gold = discard.gold
        else
            printToAll('ERROR : Um.. I can not find any Gold Unit cards at all?! ', 'Red')
        end
    end

    if draw.gold and draw.silver then -- If there are valid draw deck skip Reset
        functionStopped.resetDecks = true
    else
        for t, deck in pairs(discard.process) do -- Reset any deck with no draw decks.
            deck.setPositionSmooth(pos[t]+offset)
            deck.setRotationSmooth(rot.down)
            Wait.condition(function()
                deck.setPositionSmooth(pos[t]+size[t])
                Wait.condition(function()
                    deck.shuffle()
                    Wait.time(function() functionStopped.resetDecks = true
                    end, 0.5)
                end, function() return isSmooth(deck) end)
            end, function() return isSmooth(deck) end)
        end
    end
end


function drawCards()
    waitForFunction('allStop')
    setGameState('drawType')
    setGameState('decks')
    setGameState('currentOffer')

    local data = {
        drawLimit = gameSettings.unitOfferCount,
        offerTypes = cardData.currentOffer,
        drawPos = cardData.cardOfferPos,
        rot = cardData.face.up,
        offset = cardData.dropOffSet,
        drawDecks = {silver=cardData.drawDecks.silver.deck, gold=cardData.drawDecks.gold.deck},
        type=unitOffer.drawType,
        }

    local drawLimit = {silver=0, gold=0, maxTotal=gameSettings.unitOfferCount}
        if data.drawDecks.silver then drawLimit.silver = data.drawDecks.silver.getQuantity() end; if drawLimit.silver == -1 then drawLimit.silver = 1 end
        if data.drawDecks.gold then drawLimit.gold = data.drawDecks.gold.getQuantity() end; if drawLimit.gold == -1 then drawLimit.gold = 1 end

    local skipDraw = false
    for _, value in ipairs(data.offerTypes) do
        if not value then skipDraw = true break end
    end

    if skipDraw then
        local count = {silver=0, gold=0}
        unitOffer.overflow = false
        local waitCardList = {}
        for k, inValid in ipairs(data.offerTypes) do
            if k <= data.drawLimit then
                if not inValid then
                    local type = data.type[k]
                    local container = data.drawDecks[type]
                    if count[type] < drawLimit[type] then
                        local c = nil
                        local prams = {position=data.drawPos[k]+data.offset, rotation=data.rot}
                        if container.type == 'Card' then
                            c = container
                            c.setPositionSmooth(prams.position, false, false)
                            c.setRotationSmooth(prams.rotation, false, false)
                        else
                            c = container.takeObject(prams)
                        end
                        Wait.condition(function() c.setPositionSmooth(data.drawPos[k]) end, function() return isSmooth(c) end)
                        table.insert(waitCardList, c)
                        --print(count[type])
                    else
                        unitOffer.overflow = true
                        break
                    end
                    count[type] = count[type] + 1
                end
            end
        end
        Wait.condition(function() functionStopped.drawCards = true end, function() return objectsAreMoving(waitCardList) end)
    else
        functionStopped.drawCards = true
    end
end


--******************************************************************************
---- Wait Functions ------------------------------------------------------------
function waitForFunction(key) -- true == function runs, flase == function dose not run
    key = key or false
    if key then
        if key =='allStop' then
            if printBug then print('waitFunction ('..key..')') end
            for k,v in pairs(functionStopped) do
                functionStopped[k] = false
            end
        elseif key == 'resetWaitIDs' then
            if printBug then print('waitFunction ('..key..')') end
            -- Set Wait_ids fail safes
            wait_ids[self] = wait_ids[self] -- just to be sure there's no attempt to index a nil value later we set an empty table first.
            or {waitCleanUP = false, waitID = nil}-- We set wait variables to start state (all diffrent waits go here)
            if wait_ids[self].waitCleanUP ~= false then
                Wait.stop(wait_ids[self].waitCleanUP)
                wait_ids[self].waitCleanUP = false
            end
        else
            if printBug then print('waitFunction ('..key..') : '..tostring(functionStopped[key])) end
            return functionStopped[key]
        end
    else
        print("waitForFunction(key) ERROR")
        return true
    end
end
-- Wait.condition Wrapper for isSmoothMove -------------------------------------
function waitFunc(func, waitKey)
    Wait.condition(function() func() end, function() return waitForFunction(waitKey) end)
end
-- slideIsMoving(newOffer) shorthand -------------------------------------------
function objectsAreMoving(...)
    local args = {...}
    local objList = {}
    for k,var in pairs(args) do
        if type(var) == "table" then
            for k,v in pairs(var) do
                if v then
                    table.insert(objList, v)
                end
            end
        else
            if var then
                table.insert(objList, var)
            end
        end
    end
    --print(logString(objList, '\n---- objList'))
    for k, obj in pairs(objList) do
        if obj then
            if not isSmooth(obj) then return false end  -- Return false immediately if any value is false
        end
    end
    return true
end
-- obj.isSmoothMoving() shorthand ----------------------------------------------
function isSmooth(obj)
    if obj == nil then
        return true
    elseif not obj.isSmoothMoving() then
        return true
    end
    return false
end

--******************************************************************************
---- Cast ----------------------------------------------------------------------
function cast(castOrigin)
    local zone = Physics.cast({ origin=castOrigin + Vector(0,1,0),
                                direction={0,1,0},
                                type=3,
                                max_distance=0,
                                size=Vector(2,2,2),
                                debug=ShowCast})
    return processCast(zone)
end

function processCast(zone)
    local object = false
    for k,v in pairs(zone) do
        if v.hit_object.type == "Card" or v.hit_object.type == "Deck" then
            object = v.hit_object
          --print(object.getName())
        end
    end
    if object then
        return object
    else
        return false
    end
end

--******************************************************************************
--- Button Code ----------------------------------------------------------------
--******************************************************************************
-- On-Click Button Functions
function b_disabled(obj, color, alt_click) end-- print('b_disabled') end

function b_setGoldTicked_Toggle(obj, color, alt_click)
    self.clearButtons()
    if unitOffer.gold.on then -- untick
        unitOffer.gold.char = unitOffer.gold.unticked.char
        unitOffer.gold.pos = unitOffer.gold.unticked.pos
        unitOffer.gold.on = false
    else -- tick
        unitOffer.gold.char = unitOffer.gold.ticked.char
        unitOffer.gold.pos = unitOffer.gold.ticked.pos
        unitOffer.gold.on = true
    end
    setButtons.create(setButtons.get('ready'))
end

function b_setGoldtoManual_Toggle(obj, color, alt_click)
    self.clearButtons()
    if not alt_click then -- if Left Click
        if unitOffer.automatic.on then -- set Automatic : OFF
            unitOffer.automatic.tooltip = 'Automatic Gold Units : OFF\n(right click to remove button)'
            unitOffer.automatic.col = 'Orange'
            unitOffer.automatic.on = false
        else -- set Automatic : ON
            unitOffer.automatic.tooltip = 'Automatic Gold Units : ON\n(right click to remove button)'
            unitOffer.automatic.col = 'White'
            unitOffer.automatic.on = true
        end
    else -- if Right CLick
        unitOffer.automatic.buttonRemoved = true
    end
    setButtons.create(setButtons.get('ready'))
end

-- setButton Function Definitions
setButtons.init = function()
    setButtons.create(setButtons.get('ready'))
end

setButtons.create = function(buttons)
    for k,button in ipairs(buttons) do
        self.createButton(button)
    end
end

setButtons.disableButtons = function()
    setButtons.create(setButtons.get('disabled'))
end

setButtons.get = function(key)
        if not unitOffer.gold.char or not unitOffer.gold.pos then
            unitOffer.gold.char = unitOffer.gold.unticked.char
            unitOffer.gold.pos = unitOffer.gold.unticked.pos
        end
        local buttons = {}
        if key == 'ready' then
            local button = {label="Draw\nUnit Cards", click_function='b_mainDrawFunction', function_owner=self,
                            position={0,0.5,0}, rotation={0,180,0}, height=1200, width=2800, font_size=250
                            ,scale={0.75,0.75,0.75}
                            ,color='White', font_color='Black',
                    }
            table.insert(buttons, button)

                button = {label='', click_function='b_setGoldTicked_Toggle', function_owner=self,
                          position={-2.6,0.5,0}, rotation={0,180,0}, height=500, width=500, font_size=250
                          ,scale={0.75,0.75,0.75}
                          ,color='White', font_color='Black',
                }
            table.insert(buttons, button)
                button = {label=string.char(unitOffer.gold.char), click_function="b_disabled", function_owner=self,
                          position=unitOffer.gold.pos, rotation={0,180,0}, height=0, width=0, font_size=600
                          ,scale={1,1,1}
                          ,color='White', font_color='Black',
                }
            table.insert(buttons, button)
            if not unitOffer.automatic.buttonRemoved then
                button = {label='', click_function="b_setGoldtoManual_Toggle", function_owner=self,
                          position={1.8,0.5,-1.1}, rotation={0,180,0}, height=200, width=500, font_size=130,
                          tooltip=unitOffer.automatic.tooltip, scale={0.75,0.75,0.75},
                          color=unitOffer.automatic.col,
                }
                table.insert(buttons, button)
            end

        elseif key == 'disabled' then
            local button = {label="Draw\nUnit Cards", click_function='b_disabled', function_owner=self,
                            position={0,0.5,0}, rotation={0,180,0}, height=1200, width=2800, font_size=250
                            ,scale={0.75,0.75,0.75}
                            ,color='Red', font_color='White',
                    }
            table.insert(buttons, button)

                button = {label='', click_function='b_disabled', function_owner=self,
                          position={-2.6,0.5,0}, rotation={0,180,0}, height=500, width=500, font_size=250
                          ,scale={0.75,0.75,0.75}
                          ,color='Red', font_color='White',
                }
            table.insert(buttons, button)

                button = {label=string.char(unitOffer.gold.char), click_function="b_disabled", function_owner=self,
                          position=unitOffer.gold.pos, rotation={0,180,0}, height=0, width=0, font_size=600
                          ,scale={1,1,1}
                          ,color='Red', font_color='White',
                }
            table.insert(buttons, button)

            if not unitOffer.automatic.buttonRemoved then
                button = {label='', click_function="b_disabled", function_owner=self,
                          position={1.8,0.5,-1.1}, rotation={0,180,0}, height=200, width=500, font_size=130,
                          tooltip='', scale={0.75,0.75,0.75},
                          color='Red',
                }
                table.insert(buttons, button)
            end
        end
        return buttons
    end
--******************************************************************************
--- Tool Function Definitions --------------------------------------------------
--******************************************************************************

function setGoldSilver(card)
    if card.hasTag('Cards_UnitSilver') then return 'silver'
    elseif card.hasTag('Cards_UnitGold') then return 'gold'
    else return false end
end

gameSettings.init = function() -- initilise game settings, this needs to be edited for the "SetUP Script" at the momment it is a default value
    if not gameSettings.blitz or not gameSettings.playerCount or gameSettings.set then
        print('***** gameSettings.init\n***** (needs editing, these are debug default values)')
        gameSettings.blitz=1
        gameSettings.playerCount=2
        gameSettings.set=true
        gameSettings.unitOfferCount = gameSettings.blitz + gameSettings.playerCount + gameSettings.plusTwo
    end
end

-- Table Size ------------------------------------------------------------------
tool.tableSize = function(t)
    local count = 0
    if t ~= nil then
        for key,value in pairs(t) do count = count + 1 end
    end
    return count
end
