local ShowCast = true
local tagIDs = false
local wait_ids = {}

local rot = {down=Vector(0, 180, 180), up=Vector(0,180,0)}
local baseCount = 5
local keepCount = {on=false, count=0, butCol='White', txtCol='Black'}
local modiCount = {on=false, count=0, butCol='White', txtCol='Black'}

local drawPosition = require("/MageKnightV3/GlobalVariables").DrawToHandPositions
local tagKey = false

function onload()
    --print(' -- Code : Draw Buttons [W.I.P]')
    setVariables()
    makeButtons()
end

function dprint(txt, var)
    txt = txt or '-------'
    var = var or false
    if self.hasTag('trashID_PlayerDiscard_p2') then
        if var then
            print(logString(var, '\n--- '..txt))
        else
            print('\n'..txt)
        end
    end
end

function setVariables()
    if not tagIDs then
        tagIDs = setTagIDs()
        drawPosition = drawPosition[tagIDs.num]
        --dprint('tagIDs', tagIDs)
    end
end

function setTagIDs()
    local selfTags = self.getTags()
    local trashIDs = require("/MageKnightV3/GlobalVariables").tags_PlayerCard_TrashIDs
    local z = {}
        z.remove = 'trashID_RemovedFromGame'
        z.num = findFirstNumber(selfTags)
        z.handID = trashIDs.hand[z.num]
        z.trashID = trashIDs.player..z.num
    return z
end

function findFirstNumber(strList)
    for _, str in ipairs(strList) do
        local number = str:match("%d+") -- Find the first sequence of digits
        if number then
            return tonumber(number) -- Return the first number found
        end
    end
    return nil -- Return nil if no number is found
end


function b_Draw_IndividualCards(obj, color, alt_click)
    Wait_countClicks(self, draw_IndividualCards)
end

function draw_IndividualCards(clickCount)
    local draw = cast(self.getPosition(), 'drawDeck')
    if draw then
        local drawData = setbuttonData()
        local count = clickCount
        if count > draw.limit then count = draw.limit end

        local pos = drawPosition
        draw.count = count
        if draw.limit == 1 then
            local card = draw.deck
            card.setPositionSmooth(pos, false, false)
            card.setRotationSmooth(rot.down, false, false)
            addTrashTag(card)
            Wait.condition(function() card.setRotationSmooth(rot.up, false, false)end, function() return isSmooth(card) end)
        else
            for i = 1, draw.count do
                pos = pos + Vector(0,0.3,0)
                local prams = {position=pos, rotation=rot.down}
                local card = draw.deck.takeObject(prams)
                addTrashTag(card)
                Wait.condition(function() card.setRotationSmooth(rot.up, false, false)end, function() return isSmooth(card) end)
            end
        end
    end
end

function setHandZoneLimit(draw)
    local hand = getObjectsWithTag(tagIDs.handID)[1]
    local handsize = 0
    for k, o in ipairs(hand.getObjects()) do
        if o.type =='Card' then
            handsize = handsize + 1
        end
    end

    local count = 0

    if count < draw.maxDraw then
        count = draw.maxDraw
    end

    local remainder = draw.maxDraw - handsize ; if remainder  < 0 then remainder = 0 end
    if count > remainder then
        count = remainder
    end

    if count > draw.limit then
        count = draw.limit
    end

    return handsize, count
end

function b_Draw_HandSize(obj, color, alt_click)
    local draw = cast(self.getPosition(), 'drawDeck')
    makeButtons('drawHand')
    local waitForObjs = {}
    if draw then
        local drawData = setbuttonData()
        draw.maxDraw = drawData.draw.total
        draw.handSize, draw.count = setHandZoneLimit(draw)
        if draw.count > 0 then
            local pos = drawPosition
            if draw.limit == 1 then
                local card = draw.deck
                card.setPositionSmooth(pos, false, false)
                card.setRotationSmooth(rot.down, false, false)
                addTrashTag(card)
                Wait.condition(function() card.setRotationSmooth(rot.up, false, false)end, function() return isSmooth(card) end)
                table.insert(waitForObjs, card)
            else
                for i = 1, draw.count do
                    pos = pos + Vector(0,0.3,0)
                    local prams = {position=pos, rotation=rot.down}
                    local card = draw.deck.takeObject(prams)
                    addTrashTag(card)
                    Wait.condition(function() card.setRotationSmooth(rot.up, false, false)end, function() return isSmooth(card) end)
                    table.insert(waitForObjs, card)
                end
            end
        end
    end
    Wait.condition(function() makeButtons() end, function() return objectsAreMoving(waitForObjs) end)
end

function addTrashTag(card)
    for k, tag in ipairs(card.getTags()) do
        if string.find(string.lower(tag), string.lower('trashID_'), 1, true) then
            card.removeTag(tagIDs.remove)
            card.addTag(tagIDs.trashID)
            card.addTag(tagIDs.handID)
        end
    end
end

--[[
--print('AddTrrashTags')
for k, tag in ipairs(card.getTags()) do
    if string.find(string.lower(tag), string.lower('trashID_'), 1, true) then
        card.removeTag(tag)
        card.addTag(tagIDs.player)
        card.addTag(tagIDs.remove)
        card.addTag(tagIDs.active)
        break
    end
end
]]

function objectsAreMoving(...)
    local args = {...}
    local objList = {}
    for k,var in pairs(args) do
        if type(var) == "table" then
            for k,v in pairs(var) do
                if v then
                    table.insert(objList, v)
                end
            end
        else
            if var then
                table.insert(objList, var)
            end
        end
    end
    --print(logString(objList, '\n---- objList'))
    for k, obj in pairs(objList) do
        if obj then
            if not isSmooth(obj) then return false end  -- Return false immediately if any value is false
        end
    end
    return true
end
-- obj.isSmoothMoving() shorthand ----------------------------------------------
function isSmooth(obj)
    if obj == nil then
        return true
    elseif not obj.isSmoothMoving() then
        return true
    end
    return false
end

function b_setBaseCount(obj, color, alt_click)
    if not alt_click then
        baseCount = baseCount + 1
        if baseCount > 20 then baseCount = 20 end
    else
        baseCount = baseCount - 1
        if baseCount < 5 then baseCount = 5 end
    end
    makeButtons()
end

function b_setModiCount(obj, color, alt_click) -- modiCount = {on=false, count=0, butCol='White', txtCol='Black'}
    if not alt_click then
        modiCount.on = true
        modiCount.count = modiCount.count + 1
        if modiCount.count > 11 then modiCount.count = 11 end
        modiCount.butCol = 'Green'
        modiCount.txtCol = 'White'
    else
        modiCount.on = true
        modiCount.count = modiCount.count - 1
        if modiCount.count < 0 then modiCount.count = 0 end
        modiCount.butCol = 'Green'
        modiCount.txtCol = 'White'
    end

    if modiCount.count == 0 then
        modiCount.on = false
        modiCount.butCol = 'White'
        modiCount.txtCol = 'Black'
    end

    makeButtons()
end

function b_setKeepCount(obj, color, alt_click)
    if not alt_click then
        local keeps = cast(self.getPosition(), 'keepCount')
        if keeps then --keepCount = {on=false, count=0, butCol='White', txtCol='Black'}
            keepCount.on = true
            keepCount.count = keeps
            keepCount.butCol = 'Green'
            keepCount.txtCol = 'White'
        else
            keepCount.on = off
            keepCount.count = 0
            keepCount.butCol = 'White'
            keepCount.txtCol = 'Black'
        end
    else
        keepCount.on = false
        keepCount.butCol = 'White'
        keepCount.txtCol = 'Black'
    end
    makeButtons()
end

function cast(castOrigin, switch)
    local zone = {}
    if switch == 'keepCount' then
        zone = Physics.cast({origin=castOrigin + Vector(-17.3,7,-16.5)
                            ,direction={0,1,0}, type=3, max_distance=0, size=Vector(2,2,2)
                            ,debug=ShowCast})
        return processCast_findConquredKeeps(zone)

   elseif switch == 'drawDeck' then
       zone = Physics.cast({origin=castOrigin + Vector(-20.25,7,-7.5)
                           ,direction={0,1,0}, type=3, max_distance=0, size=Vector(2,2,2)
                           ,debug=ShowCast})
       return processCast_findDrawDeck(zone)
   end
end

function processCast_findDrawDeck(zone)
    local draw = false
    for k,v in pairs(zone) do
        local obj = v.hit_object
        if obj.type == 'Deck' or obj.type == 'Card' then
            draw = {deck=obj}
            local limit = obj.getQuantity(); if limit == -1 then limit = 1 end
            draw.limit = limit
            break
        end
    end
    return draw
end

function processCast_findConquredKeeps(zone)
    local keeps = false
    for k,v in pairs(zone) do
        local obj = v.hit_object
        if obj.hasTag('token_ConqueredKeep') then
            keeps = obj.getQuantity()
            if keeps == -1 then keeps = 1 end
        end
    end
    return keeps
end

function setbuttonData(disable)
    disable = disable or false
    --print(disable)
    local z={}
    z.draw = {}
    z.draw.base = baseCount
    z.draw.keep = keepCount
    z.draw.modi = modiCount
    z.draw.total = baseCount
        if keepCount.on then z.draw.total = z.draw.total + keepCount.count end
        if modiCount.on then z.draw.total = z.draw.total + modiCount.count end

    z.b_Draw_HandSize = {b='b_Draw_HandSize', c='White', t='Black'}
        --z.b_Draw_HandSize.b = 'b_Draw_HandSize'
        --z.b_Draw_HandSize.c = 'White'
        --z.b_Draw_HandSize.t = 'Black'
    --print(logString(z, '\n -- z'))
    if disable then
        if disable == 'drawHand' then
            z.b_Draw_HandSize.b = 'b_disable'
            z.b_Draw_HandSize.c = 'Red'
            z.b_Draw_HandSize.t = 'White'
        end
    end
    return z
end

function b_disable()end-- print('disabled') end
function makeButtons(disable)
    disable = disable or false
    local bData = setbuttonData(disable)--print(logString(bData, '\n -- bData'))
    self.clearButtons()
    local buttons, button = {}, {}
        -- Draw Single Cards, one at a time.
        button = {label="Draw Card", click_function="b_Draw_IndividualCards", function_owner=self,
                  position={3.94,2,-5.3}, rotation={0,180,0}, height=400, width=1900, font_size=250
                 ,scale={0.3,0.3,0.3}
                 ,color='Green', font_color='White'
                 };table.insert(buttons, button)
        -- Draw to Hand Size, including Modifiers.
        button = {label="Draw to "..(bData.draw.total), click_function=bData.b_Draw_HandSize.b, function_owner=self
                 ,position={4.65,2,-3.9}, rotation={0,180,0}, height=600, width=1900, font_size=250
                 ,scale={0.75,0.75,0.75}
                 , color=bData.b_Draw_HandSize.c, font_color=bData.b_Draw_HandSize.t,
                 };table.insert(buttons, button)
        -- Set Base Hand Size.
        button = {label=bData.draw.base, click_function="b_setBaseCount", function_owner=self
                 ,position={5.75,2,-4.8}, rotation={0,180,0}, height=400, width=450, font_size=250
                 , scale={0.75,0.75,0.75}, tooltip='Hand Size'
                 ,color='Green', font_color='White',
             };table.insert(buttons, button)
        -- Set Keep Modifier.
        button = {label="+"..bData.draw.keep.count, click_function="b_setKeepCount", function_owner=self
                 ,position={4.3,2,-4.8}, rotation={0,180,0}, height=400, width=450, font_size=250
                 ,scale={0.75,0.75,0.75}, tooltip='Keeps'
                 ,color=bData.draw.keep.butCol, font_color=bData.draw.keep.txtCol
                 };table.insert(buttons, button)
         -- Set Manual Modifiers.
        button = {label="+"..bData.draw.modi.count, click_function="b_setModiCount", function_owner=self
                 ,position={3.55,2,-4.8}, rotation={0,180,0}, height=400, width=450, font_size=250
                 ,scale={0.75,0.75,0.75}, tooltip='Manual Modifier'
                 ,color=bData.draw.modi.butCol, font_color=bData.draw.modi.txtCol
                 };table.insert(buttons, button)

    for k, b in pairs(buttons) do
        self.createButton(b)
    end

end

-- Table Size ------------------------------------------------------------------
function tableSize(t)
    local count = 0
    if t ~= nil then
        for key,value in pairs(t) do count = count + 1 end
    end
    return count
end

function Wait_countClicks(obj,func,delay)
    --print('IN : waitUtils.countClicks')
    local delay = delay or 0.8 -- better way of setting default parameters
    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.
      count = 0, -- We set the count to 0 here when the table is made
    }

    function delayCall()
        func(wait_ids[obj].count)
        wait_ids[obj].waitID = nil -- remove the wait id when the function is called
        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout
    end

    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists
    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count

    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.
end
