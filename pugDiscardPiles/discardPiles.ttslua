local tool = {}
      tool.hasTag = require("/_libs/tagUtils/tagUtils").allTagsInListFoundinTagList
      tool.hasIdenticalTags = require("/_libs/tagUtils/tagUtils").hasObjsGotIdenticalTagsToTagList
      tool.findObj = require("/_libs/tagUtils/tagUtils").getObjectsWithAllTags_FromTagLists

local container = nil

function onLoad(save_state)
    setVariables()
    Wait.frames(function() makeButtons() end, 120)
end

function but_return()
    local Y = 3
        for _, o in pairs(container.discard.getObjects()) do
            local pug = container.discard.takeObject({position={container.draw.getPosition().x, Y, container.draw.getPosition().z}})
            pug.setRotation({0,180,180})
            Y = Y + pug.getBounds().size.y + 0.5
        end
    self.clearButtons()
end

function makeButtons()
    local buttons = {}
    if container.draw.getQuantity() == 0 then
        local offset = -1.5
        if container.draw.hasTag('pug_orc') then offset = 1.5 end
        local button = {
              click_function = 'but_return',
              function_owner = self,
              label = 'Return',
              position = {0, 0, offset},
              rotation = {0, 0, 0},
              width = 800,
              height = 350,
              font_size = 200,
              scale={1.15,1.15,1.15}}
        table.insert(buttons, button)
    end
-- Create Buttons
   for _, button in ipairs(buttons) do
       self.createButton(button)
   end
end

function setVariables()
    if container == nil then
        container = {}
        local findTagList = {discard={'trashID_', 'DiscardTarget', 'monsterDiscardPile'},
                             draw={'eventID_MonsterDrawBag'}}

        local tagList  = {  'pug_orc', 'pug_Dungeon', 'pug_Keep', 'pug_MageTower', 'pug_Dragon', '', 'pug_Ruin', 'pug_City',
                            'pug_Tesla_nOrc', 'pug_Tesla_nDungeon', 'pug_Tesla_nDragon', 'pug_Tesla_nItem',
                            'pug_Tesla_eOrc', 'pug_Tesla_eDungeon', 'pug_Tesla_eDragon', 'pug_Tesla_eItem'}

        for k, tag in pairs(tagList) do
            local objList = getObjectsWithTag(tag)
            for k,obj in pairs(objList) do
                local objTags = obj.getTags()
                if tool.hasTag(objTags, findTagList.discard, true) then
                    if tool.hasIdenticalTags(objTags,self.getTags()) then
                        container.discard = obj
                    end
                end
            end
        end

        for k, tag in pairs(tagList) do
            local objList = getObjectsWithTag(tag)
            for k,obj in pairs(objList) do
                local objTags = obj.getTags()
                if tool.hasTag(objTags, findTagList.draw, true) then
                    if obj.hasMatchingTag(container.discard) then
                        container.draw = obj
                    end
                end
            end
        end
    else
        print('dose not equal NIL')
    end
end
