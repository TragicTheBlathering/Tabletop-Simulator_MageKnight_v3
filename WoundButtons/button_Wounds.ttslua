local Showbug = false
local dprint = require("/_libs/debug/dPrint").dprint

local ids = require("/MageKnightV3/GlobalVariables").tags_PlayerCard_TrashIDs
local pos = require("/MageKnightV3/GlobalVariables").DrawToHandPositions


local wait_ids = {}
local data = {poison=false, pos={}}

function onLoad(save_state)
    makeButtons()
    setVariables()
end

function setVariables()
    data.poison = self.hasTag('PosionBag')
    for k, tag in pairs(self.getTags()) do
        if string.find(tag, '_', 1, true) then
            data.key = tag:match("%d+")
            data.playerTrashID = ids.player..data.key
            data.playerRemove = ids.remove
            data.playerHandID = ids.hand[tonumber(data.key)]
        end
    end
    data.pos.hand = pos[tonumber(data.key)]
    data.discardPlatform = getObjectsWithAllTags({'trash_DiscardTarget', 'Cards_PlayerCard', data.playerTrashID})[1]
    data.pos.discard = data.discardPlatform.getPosition()
end

function button_AddWounds()
    --card.use_hands = false
    countClicks(self,countedClicks,0.5)
end

function countedClicks(count)
    local Y = {hand = 0.5, poison=2, offset= 0.5}
    local rot = Vector(0,180,0)
    --dprint('data', data)
    --local prams = {hand={position=data.pos.hand+Vector(0,Y.hand,0), rotation=}}

    local discard, noCast = false, true
    for i = 1, count do
        local handCard = self.takeObject({})
        handCard.setPositionSmooth(data.pos.hand+Vector(0,Y.hand,0), false, false)
        handCard, Y.hand = applyChanges(handCard, Y.hand, Y.offset)


        if data.poison then
            if noCast then
                discard = cast(data.pos.discard)
                noCast = false
            end

            if discard then
                local poisionCard = self.takeObject({})
                poisionCard.setPositionSmooth(data.pos.discard+Vector(0,Y.poison,0), false, false)
                poisionCard, Y.poison = applyChanges(poisionCard, Y.poison, Y.offset)
                Wait.condition(function() discard = discard.putObject(poisionCard) end, function() return isSmooth(poisionCard) end)
            else
                --dprint('data.poison',data.poison)
                local poisionCard = self.takeObject({})
                poisionCard.setPositionSmooth(data.pos.discard+Vector(0,Y.poison,0), false, false)
                discard, Y.poison = applyChanges(poisionCard, Y.poison, Y.offset)
                Wait.condition(function() poisionCard.setPosition(data.pos.discard+Vector(0,0.1,0)) end, function() return isSmooth(poisionCard) end)
            end
        end
    end
end

function applyChanges(card, Y, offset)
    Y = Y + offset
    card.removeTag(data.playerRemove)
    card.addTag(data.playerHandID)
    card.addTag(data.playerTrashID)
    return card, Y
end

--[[****************************************************************************
***** Cast Code ****************************************************************
********************************************************************************]]
function cast(castOrigin, switch)
    local zone = Physics.cast({ origin=castOrigin + Vector(0,1,0),
                                direction={0,1,0},
                                type=3,
                                max_distance=0,
                                size=Vector(2,2,2),
                                debug=Showbug})

    return processCast(zone, castOrigin)
end

function processCast(zone)
    for k,v in pairs(zone) do
        local obj = v.hit_object
        if obj.type == "Card" or obj.type == "Deck" then
            return obj
        end
    end
    return false
end
--******************************************************************************
function isSmooth(obj)
    if obj == nil then
        return true
    elseif not obj.isSmoothMoving() then
        return true
    end
    return false
end

function countClicks(obj,func,delay)
    --print('IN : waitUtils.countClicks')
    local delay = delay or 0.8 -- better way of setting default parameters
    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.
      count = 0, -- We set the count to 0 here when the table is made
    }

    function delayCall()
        func(wait_ids[obj].count)
        wait_ids[obj].waitID = nil -- remove the wait id when the function is called
        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout
    end

    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists
    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count

    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.
end

function makeButtons()
    local button = {}
            button.click_function = 'button_AddWounds'
            button.function_owner = self
            button.position = {0,0.1,0}
            button.rotation = {0,180,0}
            button.label =  '@'
            button.width = 1600
            button.height = 2300
            button.font_size = 250
    self.createButton(button)
end
