local TrashCan = {}
    --TrashCan.customTrashData = {}
    ---TrashCan.customTrashData.trash_specialcase = {trashid_pugdungeon=1}
    math.randomseed(os.time())
    local DicePosition = {
        Vector(-14.93, 2.44, -40.39),
        Vector(-10.87, 2.44, -40.28),
        Vector(-8.80, 2.44, -38.35),
        Vector(-5.65, 2.44, -39.14),
        Vector(-3.76, 2.44, -38.83),
        Vector(-0.54, 2.44, -38.19),
        Vector(-0.54, 2.44, -38.19),
        Vector(-13.60, 2.44, -43.20),
        Vector(-10.93, 2.44, -45.18),
        Vector(6.62, 2.44, -39.53),
        Vector(-8.23, 2.44, -41.86),
        Vector(-4.37, 2.44, -41.94),
        Vector(1.63, 2.44, -40.60),
        Vector(-5.75, 2.44, -43.79),
        Vector(-2.65, 2.44, -44.52),
        Vector(1.19, 2.44, -44.43),
        Vector(4.69, 2.44, -43.95),
        Vector(-5.14, 2.44, -46.41),
        Vector(-0.40, 2.44, -47.03),
        Vector(4.27, 2.44, -46.84)
    }

    local chosen = {}
    local rollingDie = {}
    local allStopNotStarted = true

    function TrashCan.specialCaseFunc(die, container, uniqueCastID, id)
        if die.hasTag("Dice_ManaDie") then
            local sourceBoard = getObjectsWithTag('Board_Source')[1]
            local randomRot = randomRotation()
            local Y = 10

            local value = getRandomElementFromTable(DicePosition)
            die.setScale({1,1,1})
            die.setPositionSmooth(Vector(value.x, Y, value.z), false)
            die.setRotationSmooth(randomRot, false)
            --table.insert(rollingDie, die)
            rollingDie[die] = true


            Wait.condition(function()
                die.roll()
                rollDice(die)
            end, function() return isSmooth(die) end)

            if allStopNotStarted then
                allStopNotStarted = false
                Wait.condition(function()
                    local slide = getObjectFromGUID('a16e5d')
                    slide.call('slideOffer')
                    rollingDie = {}
                    allStopNotStarted = true
                end, function() return isAllDieStopped() end)
            end

        end
    end

function rollDice(die)
    Wait.condition(
        function() -- Executed after our condition is met
            die.roll()
            Wait.condition(
                function() -- Executed after our condition is met
                    die.roll()
                    Wait.condition(
                        function() -- Executed after our condition is met
                            die.roll()
                            Wait.condition(function()
                                rollingDie[die] = false
                            end, function() return die.resting end)
                        end,
                        function() -- Condition function
                            return die.resting
                        end
                    )
                end,
                function() -- Condition function
                    return die.resting
                end
            )
        end,
        function() -- Condition function
            return die.resting
        end
    )
end
--[[

Wait.condition(function()
    local slide = getObjectFromGUID('a16e5d')
    slide.call('slideOffer')
    rollingDie = {}
    allStopNotStarted = true
end, function() return isAllDieStopped() end)

Wait.time(function()
    die.randomize()
    Wait.time(function()
        die.randomize()
        Wait.time(function()
            die.randomize()
        end, 1)
    end, 1)
end, 1)

Wait.condition(
    function() -- Executed after our condition is met
        die.roll()
        Wait.condition(
            function() -- Executed after our condition is met
                die.roll()
                Wait.condition(
                    function() -- Executed after our condition is met
                        die.roll()
                    end,
                    function() -- Condition function
                        return die.resting
                    end
                )
            end,
            function() -- Condition function
                return die.resting
            end
        )
    end,
    function() -- Condition function
        return die.resting
    end
)

for k,die in pairs(rollingDie) do
    if not die.resting then
        return false
    end
end
--rollingDie = {}
return true
]]
--------------------------------------------------------------------------------
function isAllDieStopped()
    for k,die in pairs(rollingDie) do
        if die then return false end
    end
    return true
end

function isSmooth(obj)
    if obj == nil then
        return true
    elseif not obj.isSmoothMoving() then
        return true
    end
    return false
end

function getRandomElementFromTable(tbl)
    -- Extract keys into an array
    local keys = {}
    for key in pairs(tbl) do
        table.insert(keys, key)
    end

    local randomValue
    repeat
        -- Randomly pick a key
        local randomKey = keys[math.random(#keys)]
        randomValue = tbl[randomKey]
    until not chosen[randomValue]

    -- Store the chosen value
    chosen[randomValue] = true

    -- Reset chosen table if it reaches size 20
    if tableLength(chosen) >= 20 then
        chosen = {}
    end

    return randomValue
end

function tableLength(tbl)
    local count = 0
    for _ in pairs(tbl) do count = count + 1 end
    return count
end

--[[
function getRandomElementFromTable(tbl)
    -- Extract keys into an array
    local keys = {}
    for key in pairs(tbl) do
        table.insert(keys, key)
    end

    -- Randomly pick a key
    local randomKey = keys[math.random(#keys)]
    local randomValue = tbl[randomKey]

    -- Return the key and value as a table --return {key = randomKey, value = randomValue}
    return randomValue--, randomKey
end

]]

function randomRotation()
    --Credit for this function goes to Revinor (forums)
    --Get 3 random numbers
    local u1 = math.random();
    local u2 = math.random();
    local u3 = math.random();
    --Convert them into quats to avoid gimbal lock
    local u1sqrt = math.sqrt(u1);
    local u1m1sqrt = math.sqrt(1-u1);
    local qx = u1m1sqrt *math.sin(2*math.pi*u2);
    local qy = u1m1sqrt *math.cos(2*math.pi*u2);
    local qz = u1sqrt *math.sin(2*math.pi*u3);
    local qw = u1sqrt *math.cos(2*math.pi*u3);
    --Apply rotation
    local ysqr = qy * qy;
    local t0 = -2.0 * (ysqr + qz * qz) + 1.0;
    local t1 = 2.0 * (qx * qy - qw * qz);
    local t2 = -2.0 * (qx * qz + qw * qy);
    local t3 = 2.0 * (qy * qz - qw * qx);
    local t4 = -2.0 * (qx * qx + ysqr) + 1.0;
    --Correct
    if t2 > 1.0 then t2 = 1.0 end
    if t2 < -1.0 then ts = -1.0 end
    --Convert back to X/Y/Z
    local xr = math.asin(t2);
    local yr = math.atan2(t3, t4);
    local zr = math.atan2(t1, t0);

    return Vector(math.deg(xr),math.deg(yr),math.deg(zr))
end

return TrashCan

--[[
    local Offset = uniqueCastID.trashid_pugdungeon
    obj.setPositionSmooth({-0.20+Offset, 10, -3.86})
    obj.setRotationSmooth({0, 180, 270})
    obj.setScale({2.6, 3.5, 2.6})
    uniqueCastID.trashid_pugdungeon = uniqueCastID.trashid_pugdungeon + 1
]]
