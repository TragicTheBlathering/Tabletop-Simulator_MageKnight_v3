local trashCan_Universal = {}
--uniqueCast[id.id] == uniqueCastID

local tool = require("/MageKnightV3/TrashBags/trashCan_includes")
local trashSetting = tool.defaultGlobalVariable
local uniqueDiscrard = {'uniqueTrash_P1', 'uniqueTrash_P2', 'uniqueTrash_P3', 'uniqueTrash_P4'}

function trashCan_Universal.enterContainer(bag, obj, gVariable, time)
    if bag.hasTag('event_TrashCan') then
        local var = gVariable.customTrashData
        trashSetting = tool.tbls.merge(trashSetting, var)
        tool.specialCase = gVariable.specialCaseFunc
        tool.wait.dropIntoBox('trashCan_Universal', bag, obj, prepTrashBag, time)
    end
    --print(logString(gVariable,'\n --- gVariable'))
    --print(logString(trashSetting,'\n --- trashSetting'))
end
--------------------------------------------------------------------------------
------ Start Trash Bag Code ----------------------------------------------------

--------------------------------------------------------------------------------
--- remove any decks from the trash and then move to processing ----------------
function prepTrashBag(args)
    local TrashBag = args.bag
    local removedDeckList = nil
    Wait.frames(function()
        removedDeckList = removeDecksFormTrash(TrashBag)
        Wait.frames(function() processTrashBag(TrashBag, removedDeckList) end, 1) -- wait for removed decks to spawn compleatly
    end, 1)
    --printToAll('Trash 01 : runTrash!')
end
--------------------------------------------------------------------------------
--- runTrash -------------------------------------------------------------------
function processTrashBag(TrashBag, removedDeckList)
    local uniqueCast = uniqueCastLocations(TrashBag, removedDeckList)
-- Objects in Trash
    processObjectsInList(uniqueCast, TrashBag, TrashBag)
-- Removed Decks
    for k,deck in pairs(removedDeckList) do
        processObjectsInList(uniqueCast, deck, TrashBag)
    end
end

function processObjectsInList(uniqueCast, container, TrashBag)
    --print('\n------ processObjectsInList')
    --print(logString(uniqueCast,'\n------ uniqueCast'))
    local containedObjs = container.getObjects()
    local idex = tool.takeObj.reverseIndex(containedObjs)
    for k,dex in ipairs(idex) do
        local obj = containedObjs[dex+1]
        if obj.tags[1] then
            local id = setIDs(obj.tags, obj, TrashBag)
            if id.destory then
                destroyObject(container.takeObject({index = dex}))
            elseif id.validDiscardObj then
                if id.action == trashSetting.specialCase then
                    tool.specialCase(container.takeObject({index = dex}), TrashBag, uniqueCast[trashSetting.specialCase], id)
                elseif id.action == trashSetting.discardObject then
                    --print(id.id)
                    moveObject(container.takeObject({index = dex}), TrashBag, uniqueCast[id.id], id)
                end
            end
        end
    end
end

function setIDs(tagList, obj, TrashBag)
    --print(logString(tagList, '\n---- tagList'))
    local id = {}
    for k,t in ipairs(tagList) do
        local tag = string.lower(t)
        if tag == trashSetting.discardObject then
            if obj.memo == 'trash_forceDelete' then
                id.action = trashSetting.deleteme
                id.destory = true
                id.obj = obj
                break
            elseif obj.memo == 'trash_removedFromGame' then
                --print('memo == '..obj.memo)
                id.action = trashSetting.discardObject
                id.validDiscardObj = true
                id.obj = obj
                break
            else
                id.action = trashSetting.discardObject
                id.validDiscardObj = true
                id.obj = obj
                break
            end

        elseif tag == trashSetting.specialCase then
            --print(trashSetting.specialCase..' : '..tag)
            id.action = trashSetting.specialCase
            id.validDiscardObj = true
            id.obj = obj
            break

        elseif tag == trashSetting.deleteme then
            id.action = trashSetting.deleteme
            id.destory = true
            id.obj = obj
            break
        end
    end
    local breakAll = false
    local foundAdjust_playerCard = false
    local foundAdjust_throwAwayCard = false
    for k,t in ipairs(tagList) do
        if breakAll then break end
        local tag2 = string.lower(t)
        if string.find(tag2, trashSetting.trashID_, 1, true) then
            --print(obj.memo)
            if tag2 == 'trashid_playercard' then
                for k, t in ipairs(uniqueDiscrard) do
                    if TrashBag.hasTag(t) then
                        --print('-----------'..'trashid_'..string.lower(t))
                        local adjustedID = 'trashid_'..string.lower(t)
                        --print('-----------'..adjustedID)
                        id.id = adjustedID
                        break
                    end
                end
                if obj.memo == 'trash_removedFromGame' then
                    local adjustedID = 'trashid_removedfromgame'
                    --print('adjustedID')
                    id.id = adjustedID
                end
                breakAll = true
            else
                --print('!!!')
                id.id = tag2
                breakAll = true
            end

        elseif tag2 == trashSetting.specialCase then
            --print('=========='..tag2)
            id.id = tag2
            breakAll = true
        end
    end
    --print(logString(id, '\n------ id (setIDs)'))
    return id
end

function foundUniqueTag(tagList)
    local v = false
    for k,t in ipairs(tagList) do
        local tag = string.lower(t)
        if tag == 'playercard_throwaway' then
            --print(tag)
            v = true
        end
    end
    return v
end

--moveObject(container.takeObject({index = dex}), container, uniqueCast[id.id], id)
function moveObject(obj, container, uniqueCastID, id)
        uniqueCastID.Y = positionObject(obj, container, uniqueCastID)
        print('---------------------------------------------------------------')
        Wait.condition(function()
                       uniqueCastID.targetToMoveAbove = Wait_AddCardtoDeck(obj, uniqueCastID)
                end, function() return not obj.isSmoothMoving() end)
    return uniqueCastID
end

function positionObject(obj, container, uniqueCastID, id)
    print(logString(uniqueCastID.targetToMoveAbove, '\n--- uniqueCastID.targetToMoveAbove'))
    local offset = getSizeofObj(obj).y+0.5
    if obj.type == "Card" then
        offset = 0.35
    end
    obj.setPosition(tool.takeObj.placeTopOrBot_ofObject(container,'top')+Vector(0,0.2,0))
    obj.setPositionSmooth(tool.takeObj.placeTopOrBot_ofObject(uniqueCastID.targetToMoveAbove,'top')+Vector(0,uniqueCastID.Y,0)) --uniqueCastID.targetSource.getPosition()
    print('!!!!!')
    return uniqueCastID.Y + offset
end

function Wait_AddCardtoDeck(obj, uniqueCastID)--(card, discardZonePos, targetObj)
    --print(logString(uniqueCastID, "\n uniqueCastID"))
    local discardPile = uniqueCastID.targetToMoveAbove
    if discardPile then
        discardPile = discardPile.putObject(obj)
    else
        if obj.type == "Card" then
            obj.setPosition(tool.takeObj.placeTopOrBot_ofObject(uniqueCastID.platform,'top'))--+Vector(0,0.05,0))
            discardPile = obj
        end
    end
    return discardPile
end

function getSizeofObj(obj)
    local size = obj.getBounds().size
    return size
end
--------------------------------------------------------------------------------
--- removeDecksFormTrash(TrashBag) ---------------------------------------------
function removeDecksFormTrash(TrashBag)
    local tag = trashSetting.tag_validTrashOBJ
    local type = 'Deck'
    local containedObjects = TrashBag.getData().ContainedObjects
    local indexesToRemove = tool.takeObj.reverseIndex_TagedOnly(tag, containedObjects, 'Deck')

    return removeDecks_SetPosition(indexesToRemove, TrashBag, true)--, 'debug') -- debug will move decks to a visible locaiton before running code
end

function removeDecks_SetPosition(indexesToRemove, TrashBag, debug)
    debug = debug or false; local count = 0
    local z = {}
    local posAbove = tool.takeObj.placeTopOrBot_ofObject(TrashBag,'top')
    for i,indexToRemove in ipairs (indexesToRemove) do
        local obj = TrashBag.takeObject({ index = indexToRemove })
            if debug then
                --print('debug')
                local sizeCard = obj.getBounds().size
                local trashSize = TrashBag.getBounds().size
                local offset = Vector(count,0,0-trashSize.z-2.8)
                obj.setPosition(posAbove+offset)
                count = count + sizeCard.x + 0.6
            else
                obj.setPosition(posAbove+Vector(0,-70,0))
            end
        obj.setRotation(Vector(0,180,0))
        obj.setLock(true)
        local newDeck = adjustDeckViaSpawn(obj)
        table.insert(z, newDeck)
    end
    if z[1] then return z else return {} end
end

function adjustDeckViaSpawn(deck)
    local decals = deck.getDecals()
    local throwAwayDeck = false
    if decals then
        for k,v in pairs(decals) do
            if v.name == 'decal_ThrowAway' then
                throwAwayDeck = true
                break
            end
        end
    end

    if throwAwayDeck then -- Hack to handle Decks Facing... I need to rebuild this entire library!
        deckData = deck.getData()
        local containedObjs = deckData.ContainedObjects

        --print(logString(containedObjs, 'containedObjs'))
        for k,card in ipairs(containedObjs) do
            for q, tag in ipairs(card.Tags) do
                if tag == 'Cards_DeedDeckCard' then -- '' ''
                    containedObjs[k].Memo = 'trash_removedFromGame'
                    break
                elseif tag == 'Cards_Wound' then
                    containedObjs[k].Memo = 'trash_forceDelete'
                    break
                end
            end
        end
        deckData.ContainedObjects = containedObjs
        deck.destruct()
        local data = {data = deckData,
                      callback_function = function(spawned_object) spawned_object.setLock(true) end
        }

        local newDeck = spawnObjectData(data)

        return newDeck
    else
        return deck
    end
end

--[[
local decals = deck.getDecals()
local throwAwayDeck = false
if decals then
    for k,v in pairs(decals) do
        if v.name == 'decal_ThrowAway' then
            throwAwayDeck = true
            break
        end
    end
end
]]

---- Working OLD : removeDecks_SetPosition(indexesToRemove, TrashBag, debug)
--[[
function removeDecks_SetPosition(indexesToRemove, TrashBag, debug)
    debug = debug or false; local count = 0
    local z = {}
    local posAbove = tool.takeObj.placeTopOrBot_ofObject(TrashBag,'top')
    for i,indexToRemove in ipairs (indexesToRemove) do
        local obj = TrashBag.takeObject({ index = indexToRemove })
            if debug then
                --print('debug')
                local sizeCard = obj.getBounds().size
                local trashSize = TrashBag.getBounds().size
                local offset = Vector(count,0,0-trashSize.z-2.8)
                obj.setPosition(posAbove+offset)
                count = count + sizeCard.x + 0.6
            else
                obj.setPosition(posAbove+Vector(0,-70,0))
            end
        obj.setRotation(Vector(0,180,0))
        obj.setLock(true)
        table.insert(z, obj)
    end
    if z[1] then return z else return {} end
end
]]
--------------------------------------------------------------------------------
--- UniqueCastLocations(TrashBag, removedDeckList) -----------------------------
--- Build a list from trash and find the unique locations for each discard, then cast at that location and return found data.
--- Loop though trash objects and find the "DiscardMe_" Tag.. and then extract the "kind" of discard type as well as the unique Identifyer (ID) of the discard
function uniqueCastLocations(TrashBag, removedDeckList)
    local locaton = {}
    for k,obj in ipairs(TrashBag.getObjects()) do
        if obj.tags[1] then
            local id = setDiscardLocations(obj, TrashBag)
            if id ~= nil then
                if id.validDiscardObj then
                    locaton[id.id] = id.validDiscardObj
                end
            end
        end
    end


    for _, deck in ipairs (removedDeckList) do
        for _, card in ipairs(deck.getObjects()) do
            if card.tags[1] then
                local id = setDiscardLocations(card, TrashBag)
                if id.validDiscardObj then
                    locaton[id.id] = id.validDiscardObj
                end
            end
        end
    end
    location = tool.cast(locaton, trashSetting)
    location = setSpecialCase(TrashBag, removedDeckList, location)
    --print(logString(location,'\n --- location'))
    return location
end

function setSpecialCase(TrashBag, removedDeckList, location)
    local sc = {}
    for k,obj in ipairs(TrashBag.getObjects()) do
        if obj.tags[1] then
            local tagList = obj.tags
            for k,t in pairs(tagList) do
                local tag = string.lower(t)
                if trashSetting.specialCase == tag then
                    for k,t in pairs(tagList) do
                        local tag = string.lower(t)
                        if string.find(tag, trashSetting.trashID_, 1, true) then
                            sc[tag] = trashSetting[trashSetting.specialCase][tag]
                            break
                        end
                    end
                    break
                end
            end
        end
    end
    location[trashSetting.specialCase] = sc
    --print(logString(location, '\n--- location'))
    return location
end
--[[
local decals = deck.getDecals()
local throwAwayDeck = false
if decals then
    for k,v in pairs(decals) do
        if v.name == 'decal_ThrowAway' then
            throwAwayDeck = true
            break
        end
    end
end
]]
----------------------------------------------------------------------------------------------- EDIT HERE
function setDiscardLocations(obj, TrashBag)
    local tagList = obj.tags
    local id = {}
    for k,t in pairs(tagList) do
        if breakALL then break end
        local tag = string.lower(t)
        if tag == trashSetting.discardObject then
            id.action = trashSetting.discardObject
            id.validDiscardObj = true
        else
            for k,t in pairs(tagList) do
                if string.find(string.lower(t), trashSetting.trashID_, 1, true) then
                    if tag == 'trashid_playercard' then
                        for k, utag in ipairs(uniqueDiscrard) do
                            if TrashBag.hasTag(utag) then
                                local adjustedID = 'trashid_'..string.lower(utag)
                                id.id = adjustedID
                                --print('==='..id.id)
                                break
                            end
                        end
                        if obj.memo == 'trash_removedFromGame' then
                            local adjustedID = 'trashid_removedfromgame'
                            id.id = adjustedID
                            --print('---'..id.id)
                            break
                        end
                    else
                        id.id = tag
                        break
                    end
                end
            end
        end
    end
    return id
end

return trashCan_Universal
