local dprint = require("/_libs/debug/dPrint").dprint

--
local ShowDebug = false

local destroyList = {}

local button1Data = {{click_function = 'f_randomise', label = 'Random Dummy', width = 1800, height = 350, pos={-0.2, 0.1, 1.03}}
                    ,{click_function = 'f_ProcessDummy_Draw3', label = 'Draw 3 Cards', width = 2000, height = 550, pos={0, 0.103, 1.05}}
                    --,{click_function = 'f_ProcessDummy_Draw1', label = 'Draw 1 Card', width = 1200, height = 350, pos={0, 0.1, 1.19}}}
                    ,{click_function = 'f_ProcessDummy_Draw1', label = 'Draw 1 Card', width = 2000, height = 550, pos={0, 0.103, 1.05}}}
--{0, 0.1, 1.16}
local button2Data = {{click_function = 'f_choose', label = 'Choose Current Dummy', width = 2400, height = 350, pos={-0.2, 0.1, 1.19}} --pos={0, 0.1, 1.19}
                    ,{click_function = 'f_ProcessDummy_Draw1', label = 'Draw 1 Card', width = 1800, height = 550, pos={0, 0.1, 1.28}}
                    ,{click_function = 'f_blank', label = '', width = 0, height = 0}}

local allskills =  {on=false, color='Red', textcolor='White', custom={on=false, color='Red', textcolor='White'}}
local addVolkare = {on=false, color='Red', textcolor='White', custom={on=false, color='Red', textcolor='White'}}

local officialKnights = {'Select : Norowas', 'Select : Goldyx', 'Select : Tovak', 'Select : Wolfhawk', 'Select : Krang', 'Select : Arythea', 'Select : Braevalar'}

local y = {offset=0, waitID=nil}
local wait_ids = {}

--******************************************************************************
--****** Save and Load Code ****************************************************
--******************************************************************************
--[[
function updateSave()
    local data_to_save = {button=b}
    saved_data = JSON.encode(data_to_save)
    self.script_state = saved_data
    --self.script_state = "" -- Clear All Data
end
]]
function onSave()
    local data_to_save = {button=b}
    saved_data = JSON.encode(data_to_save)
    self.script_state = saved_data
    --self.script_state = "" -- Clear All Data
end

function onLoad(saved_data)
    if saved_data ~= "" then
        --dprint('saved_data', saved_data)
        local loaded_data = JSON.decode(saved_data)
        b=loaded_data.button
    else
        b=1
    end
    --b=1;updateSave() -- resetSave
    local seed = generate_robust_seed()
    math.randomseed(seed)
    makeButtons()
end

function generate_robust_seed()
    local tbl = tostring({}):gsub("table: ", "")
    local unique_id = tonumber(tbl, 16)
    return (os.time() + tonumber(tostring(os.clock()):reverse())) / unique_id
end
--******************************************************************************
--****** Fetch Dummy Player ****************************************************
--******************************************************************************
------- Fetch Volkare ----------------------------------------------------------
local volk = {}
      volk.Volkare_BoardToken = {p=Vector(0.00, 0.46, 3.66)   , r=Vector(0,180,180), lock=true}
      volk.Cards_PlayerCard   = {p=Vector(6.57, 0.22, -7.49)  , r=Vector(0,180,180)}
      volk.event_TrashCan     = {p=Vector(9.60, 0.10, 7.73)   , r=Vector(0,180,0), lock=true}
      volk.Volkare_Roller     = {p=Vector(7.06, 0.17, 10.24)  , r=Vector(0,180,0), freeze=true}
      volk.Volkare_Blood      = {p=Vector(9.60, 0.10, 10.24)  , r=Vector(0,0,0), lock=true}
      volk.Volkare_LevelInfo  = {p=Vector(19.50, 0.15, 0.33)  , r=Vector(0,180,180), freeze=true}
      volk.Volkare_skillBox   = {p=Vector(0.00, 0.81, 3.66)   , r=Vector(0,180,0)}
      volk.Volkare_returnCard = {p=Vector(15.23, 0.01, -14.50), r=Vector(0,180,0), lock=true}
      volk.Volkare_returnMeep = {p=Vector(13.03, 0.18, -15.64), r=Vector(0,180,0)}
      volk.Volkare_questCard  = {p=Vector(23.98, 0.01, -14.50), r=Vector(0,180,0), lock=true}
      volk.Volkare_questMeep  = {p=Vector(22.10, 0.17, -13.92), r=Vector(0,180,0)}

local WaitVolk = {}

function chooseVolkare()
    fetch_DummyTurnOrderToken()
    local platforms = getObjectsWithTag('KnightSelect')
    if #platforms == 0 then
        b=3; self.clearButtons(); makeButtons(); --updateSave()
        self.interactable = false
        self.setLock(true)
        --updateSave()

        local existingObjects = castZone('clearBoard')
        if existingObjects then
            for k, obj in pairs(existingObjects) do
                destroyObject(obj)
            end
        end

        local sourceBag = getObjectsWithTag('Volkare_ComponantBag')[1]
        local drawbag = sourceBag.takeObject(sourceBag.getPosition()+Vector(0,0,1.5))
        enableCollider(drawbag, false)
        drawbag.setLock(true)

        local boardPos = self.getPosition()
        for i = 1, drawbag.getQuantity() do
            local obj = drawbag.takeObject({})
            for key, v in pairs(volk) do
                if obj.hasTag(key) then
                    if volk[key].lock then
                        obj.setLock(true)
                    elseif volk[key].freeze then
                        obj.setLock(true)
                        obj.interactable = false
                    end
                    obj.setPosition(boardPos+Vector(0,5,0))
                    obj.setRotation(volk[key].r)
                    obj.setPositionSmooth(boardPos+volk[key].p)
                    table.insert(WaitVolk, obj)
                end
            end
        end
        --Wait.frames(function() destroyObject(drawbag) fetchSkills() end, 80)
        Wait.condition(function() fetchSkills(drawbag) end, function() return objectsAreMoving(WaitVolk) end)
    else
        broadcastToAll("["..Color.red:toHex(false).."]ERROR : [-]Run the Token and Card Pool Script First!", 'White')
    end
end

function fetchSkills(source_volkBag)
    destroyObject(source_volkBag)
    WaitVolk = {}
    local setupBags = getObjectsWithTag('setupBag_PlayerBoard_Knight')
    local skillShuffler = getObjectsWithTag('Volkare_skillBox')[1]
    local pos = skillShuffler.getPosition()
    local offset = Vector(0,3,0)
    volk_GetSkills(setupBags, skillShuffler, pos, offset)
end

function volk_GetSkills(setupBags, skillShuffler, pos, Yoffset)
    if allskills.on or allskills.custom.on then
        volkGet_allSkills(setupBags, skillShuffler, pos, Yoffset)
    else
        volkGet_skillBoxes(setupBags, skillShuffler, pos, Yoffset)
    end
end

function volkGet_allSkills(setupBags, skillShuffler, pos, Yoffset)
    local aSkills, oSkills, boxName = false, false, ""
    if allskills.on and not allskills.custom.on then
        oSkills = true
        aSkills = false
        boxName = "All Official Skills"
    elseif allskills.on and allskills.custom.on then
        oSkills = true
        aSkills = true
        boxName = "All Skills"
    end
    local skillBag = getObjectsWithTag('Volkare_skillBox')[1]
    skillbag_offset = Vector(-8.19, 0.10, 10.16)
    skillBag.setTags({'PlayerSkill_Bag'})
    skillBag.setLock(true)
    skillBag.setScale(Vector(0.92, 0.92, 0.92))
    skillBag.setName(boxName)
    skillBag.setDescription('')
    local pos = self.getPosition()+skillbag_offset
    skillBag.setPositionSmooth(pos+Vector(0,3,0))
    Wait.condition(function()
        skillBag.setPositionSmooth(pos)
        Wait.condition(function()
            getVolk_individualSkills(pos, oSkills, aSkills)
        end, function() return isSmooth(skillBag) end)
    end, function() return isSmooth(skillBag) end)
end

function getVolk_individualSkills(pos, oSkills, aSkills)
    local destroyList = {}
    local sourceBags = {source = {}, skill = {}}
    if oSkills then
        local setupBags = getObjectsWithTag('setUpBag_PlayerBoard_Knight')
        for k, sourcebag in pairs(setupBags) do
            if aSkills then
                local bag = sourcebag.takeObject({}); table.insert(destroyList, bag)
                bag.setLock(true); enableCollider(bag, false)
                table.insert(sourceBags.source, bag)
            else
                for k, official in pairs(officialKnights) do
                    if sourcebag.getName() == official then
                        local bag = sourcebag.takeObject({}); table.insert(destroyList, bag)
                        bag.setLock(true); enableCollider(bag, false)
                        table.insert(sourceBags.source, bag)
                    end
                end
            end
        end

        for k, bag in pairs(sourceBags.source) do
            local dex = findSkillBox(bag).index
            local skillBag = bag.takeObject({index=dex}); table.insert(destroyList, skillBag)
            skillBag.setLock(true); enableCollider(skillBag, false)
            table.insert(sourceBags.skill, skillBag)
        end

        local Y = Vector(0,5,0)
        for k, bag in pairs(sourceBags.skill) do
            for i = 1, bag.getQuantity() do
                local skill = bag.takeObject({})
                skill.setLock(true)
                --Wait.frames(function()
                    skill.setRotation(Vector(0, 180, 0))
                    skill.setPosition(pos+Y)
                    skill.setLock(false)
                    Y = Y + Vector(0,0.5,0)
                --end, 5)
            end
        end
        Wait.frames(function() destroyObjList(destroyList) end, 80)
    end --- END -- if oSkills then
end

function volkGet_skillBoxes(setupBags, skillShuffler, pos, Yoffset)
    local destroyList = {}
    local knightList = {}
    local offset = Yoffset + Vector(0,5,0)

    for k, sourceBag in pairs(setupBags) do
        local source_KnightBag = sourceBag.takeObject(sourceBag.getPosition()+Vector(0,0,1.5))
        enableCollider(source_KnightBag, false)
        source_KnightBag.setLock(true)
        table.insert(destroyList, source_KnightBag)
        table.insert(knightList, source_KnightBag)
    end

    local breakOut = false
    for k, bag in pairs(knightList) do
        local contents = bag.getObjects()
        for k, obj in pairs(contents) do
            if breakOut then break end
            for k, tag in pairs(obj.tags) do
                if tag == "PlayerSkill_Bag" then
                    local box = bag.takeObject({index=obj.index})
                    box.setPosition(pos+offset)
                    box.setRotation(Vector(0,180,0))
                    box.setScale(Vector(1.77, 1.83, 1.87))
                    box.addTag('trash_DeleteMe')
                    offset = offset + Vector(0,2.5,0)
                    --Wait.frames(function() skillShuffler.putObject(box) end, 40)
                    break
                end
            end
        end
    end
    Wait.frames(function() destroyObjList(destroyList) end, 80)
end

function destroyObjList(list)
    for k,v in pairs(list) do
        destroyObject(v)
    end
end
--******************************************************************************
--****** Load a Random Dummy ***************************************************
--******************************************************************************
function f_randomise(obj, playerCol, alt_click)
    local platforms = getObjectsWithTag('KnightSelect')
    if #platforms == 0 then
        if (not altClick) and Player[playerCol].admin then
            local existingObjects = castZone('clearBoard')
            if existingObjects then
                for k, obj in pairs(existingObjects) do
                    destroyObject(obj)
                end
            end

            local selectVolk = false
            local setupBag_dummyCards = getObjectsWithTag('setupBag_DummyCards')[1]
            local deck = setupBag_dummyCards.takeObject({})
            deck.setLock(true)

            if addVolkare.on then
                local size = deck.getQuantity()+1
                local volkNum = size
                local ran = math.random(1, size)
                if ran == volkNum then selectVolk=true end
            end

            if selectVolk then
                local bag = getObjectsWithTag('Volkare_DummySelectBag')[1]
                local pug = bag.takeObject({})
                pug.setPosition(self.getPosition()+Vector(0,2,3.95))
                pug.setRotation(Vector(0,180,0))
                selectVolk=false
                destroyObject(deck)
            else
                deck.setLock(false)
                deck.setPosition(self.getPosition()+Vector(0,2,3.95))
                deck.setRotation(Vector(0,180,0))
                deck.randomize()
                selectVolk=true
            end
        end
    else
        broadcastToAll("["..Color.red:toHex(false).."]ERROR : [-]Run the Token and Card Pool Script First!", 'White')
    end
end

function f_chooseVolkare(obj, playerCol, altClick)
    local platforms = getObjectsWithTag('KnightSelect')
    if #platforms == 0 then
        if (not altClick) and Player[playerCol].admin then
            local existingObjects = castZone('clearBoard')
            if existingObjects then
                for k, obj in pairs(existingObjects) do
                    destroyObject(obj)
                end
            end

            local bag = getObjectsWithTag('Volkare_DummySelectBag')[1]
            local pug = bag.takeObject({})
            pug.setPosition(self.getPosition()+Vector(0,2,3.95))
            pug.setRotation(Vector(0,180,0))
        end
    else
        broadcastToAll("["..Color.red:toHex(false).."]ERROR : [-]Run the Token and Card Pool Script First!", 'White')
    end
end
--******************************************************************************
--****** Chhose a Dummy Player *************************************************
--******************************************************************************
function f_choose(obj, playerCol, alt_click)
    local platforms = getObjectsWithTag('KnightSelect')
    if #platforms == 0 then
        if (not altClick) and Player[playerCol].admin then
            local deck = castZone('chooseKnight')
            if deck then
                local dummyCard = false
                if deck.type == 'Deck' then
                    local contents = deck.getObjects()
                    dummyCard = deck.takeObject({rotation=Vector(0,180,0), index=contents[deck.getQuantity()].index})
                    dummyCard.setPosition(self.getPosition()+Vector(0,1.5,3.95))
                    destroyObject(deck)
                else
                    dummyCard = deck
                end

                if dummyCard then
                    getCrystals()
                    dummyCard.setLock(true)
                    dummyCard.setPositionSmooth(self.getPosition()+Vector(0,0.11,3.95))
                    fetchObjects(dummyCard)
                end

            else
                local volkPug = getObjectsWithTag('Volkare_BoardToken')
                if volkPug[1] then
                    chooseVolkare()
                else
                    broadcastToAll('ERROR : You need to select a Dummy Plater First!', 'Red')
                end
            end
            --Wait.time(function() destroyDrawBags() end, 5)
        end
    else
        broadcastToAll("["..Color.red:toHex(false).."]ERROR : [-]Run the Token and Card Pool Script First!", 'White')
    end
end

--******************************************************************************
--****** Process Dummy Player***************************************************
--******************************************************************************
function drawCards(count)
    count = count or 0
    --print(count)
    local drawDeck = castZone('draw')
    local pos = self.getPosition() + Vector(-6.81, 2, -7.5)
    local xOffset = 0

    if drawDeck then
        if drawDeck.type == 'Card' then
            local offset = Vector(0,y.offset,0)
            drawDeck.setPositionSmooth(pos+offset)
            drawDeck.setRotationSmooth(Vector(0,180,0))
        else
            local deckSize = drawDeck.getQuantity()
            --print(deckSize)
            if count >  deckSize then
                count = deckSize
            end

            for i = 1, count do
                local offset = Vector(0,y.offset,0)
                local card = drawDeck.takeObject({position=pos+offset+Vector(xOffset,0,0), rotation=Vector(0,180,0)})
                card.setPositionSmooth(pos+offset+Vector(xOffset,0,0))
                y.offset = y.offset + 0.3
                xOffset = xOffset + 1.5
                Wait.condition(function()
                    card.setPositionSmooth(pos+offset)
                end, function() return isSmooth(card) end)
            end
        end
    end-- end IF Deck Exists

    if y.waitID then Wait.stop(y.waitID); y.waitID = nil end
    y.waitID = Wait.time(function() y.offset = 0 end, 5)
end

function f_ProcessDummy_Draw1(obj, playerCol, altClick)
    if not altClick then
        local count = clickCounter(self,drawCards,0.4)
        if count then
            if count > 0 then
                drawCards(count)
            end
        end
    else
        resetDeck()
    end
end

function clickCounter(obj, func, delay)
    local delay = delay or 0.8 -- better way of setting default parameters
    wait_ids[obj] = wait_ids[obj] or { -- just to be sure there's no attempt to index a nil value later we set an empty table first.
      count = 0, -- We set the count to 0 here when the table is made
    }

    function delayCall()
        func(wait_ids[obj].count)
        wait_ids[obj].waitID = nil -- remove the wait id when the function is called
        wait_ids[obj].count = 0  -- We set the count to 0 here when the wait has ended due to timeout
    end

    if wait_ids[obj].waitID then Wait.stop(wait_ids[obj].waitID); wait_ids[obj].waitID = nil end -- end the previous wait if it exists
    wait_ids[obj].waitID = Wait.time(delayCall, delay) -- make a new wait, but with _no_ count

    wait_ids[obj].count = wait_ids[obj].count + 1 -- finally increment the click amount.
end

function f_ProcessDummy_Draw3(obj, playerCol, altClick)
    if not altClick then
        drawCards(3)
    else
        resetDeck()
    end
end

function resetDeck() -- resetDeck
    local pos = self.getPosition()+Vector(6.57, 0.11, -7.49)
    local drawDeck = castZone('draw')
    local discardDeck = castZone('discard')
    if drawDeck then
        discardDeck.setPositionSmooth(pos+Vector(0,3,0))
        discardDeck.setRotationSmooth(Vector(0,180,180))
        Wait.condition(function()
            local posAbove = Vector(0, drawDeck.getBounds().size.y+0.5, 0)
            discardDeck.setLock(false)
            discardDeck.setPositionSmooth(pos+posAbove)
            Wait.condition(function()
                local deck = drawDeck.putObject(discardDeck)
                resetShuffle(50, deck)
            end, function() return isSmooth(discardDeck) end)
        end, function() return isSmooth(discardDeck) end)
    else
        discardDeck.setPositionSmooth(pos+Vector(0,3,0))
        discardDeck.setRotationSmooth(Vector(0,180,180))
        Wait.condition(function()
            resetShuffle(0, discardDeck)
        end, function() return isSmooth(discardDeck) end)
    end
end

function resetShuffle(pasue, deck)
    Wait.frames(function()
    deck.randomize()
        Wait.frames(function()
            deck.randomize()
            Wait.frames(function()
                deck.randomize()
            end, 30)
        end, 30)
    end, pasue)
end

--******************************************************************************
--****** Stuff to Edit and Move ************************************************
--******************************************************************************

function destroyDrawBags()
    local z = {}
    for k, obj in pairs(destroyList) do
        z[obj] = obj
    end

    for k, obj in pairs(z) do
        destroyObject(obj)
    end
    destroyList = {}
end

function getCrystals()
    local setupBag_DummyCrystals = getObjectsWithTag('setupBag_DummyCrystals')[1] --2.55 2.01
    local bag = setupBag_DummyCrystals.takeObject({}); table.insert(destroyList, bag)
    bag.setLock(true); enableCollider(bag, false)

    local offset={z=Vector(0,0.54,0)} --{19.37, 2.01, -73.66}
            offset.Crystal_White=self.getPosition() + Vector(6.58,0,10.93) + offset.z -- {25.95, 2.01, -62.73}
            offset.Crystal_Blue=self.getPosition() + Vector(6.45,0,9.77) + offset.z -- {25.82, 2.01, -63.89}
            offset.Crystal_Green=self.getPosition() + Vector(8.2,0,9.45) + offset.z -- {27.57, 2.01, -64.21}
            offset.Crystal_Red=self.getPosition() + Vector(8.32,0,11.03) + offset.z -- {27.69, 2.01, -62.63}
            offset.Crystal_Gold=self.getPosition() + Vector(9.84,0,9.54) + offset.z -- {29.21, 2.01, -64.12}
            offset.Crystal_Black=self.getPosition() + Vector(9.83,0,11.17) + offset.z -- {29.20, 2.01, -62.49}



    for k, v in pairs(bag.getObjects()) do
        local obj = bag.takeObject({})
        obj.setLock(true)
        obj.setPosition(self.getPosition() + Vector(0,3,0))
        for tag, pos in pairs(offset) do
            if obj.hasTag(tag) then
                obj.setPositionSmooth(pos)
                break
            end
        end
    end

end

function fetch_DummyTurnOrderToken()
    local shuffler = getObjectsWithTag('playerMarker_TurnOrderBAG')[1]
    local bag = false
    if not getObjectsWithTag('Volkare_BoardToken')[1] then
        bag = getObjectsWithTag('setupBag_DummyTurnOrderToken')[1]
    else
        bag = getObjectsWithTag('Volkare_DummyToken')[1]
    end
    if bag then
        local p = Vector(15.27, 2.01, -44.23) + Vector(0,3,0)
        local r = Vector(0,180,0)
        local posAbove = shuffler.getPosition() + Vector(0,3,0)
        local token = bag.takeObject({})
        token.setPosition(posAbove)
        token.setRotation(r)
        token.setPositionSmooth(p)
    end
end

function fetchObjects(dummyCard)
    self.setLock(true)
    self.interactable = false
    self.clearButtons()
    b=2
    makeButtons()
    --updateSave()

    fetch_DummyTurnOrderToken()
    local name = dummyCard.getName()
    local setupBags = getObjectsWithTag('setUpBag_PlayerBoard_Knight')
    local setupBag = false
    for k,v in pairs(setupBags) do
        if string.find(string.lower(v.getName()), string.lower(name), 1, false) then
            setupBag = v
        end
    end

    local bag = setupBag.takeObject({}); table.insert(destroyList, bag)
    bag.setLock(true); enableCollider(bag, false)

    local skillDex = findSkillBox(bag).index
    local box = bag.takeObject({index=skillDex})
    box.setLock(true)
    box.shuffle()

    Wait.frames(function()
        local posAbove = self.getPosition()
        box.setPosition(posAbove+Vector(0,3,0))
        box.setScale(Vector(1.77, 1.83, 1.87))
        box.setRotation(Vector(0,180,0))
        box.setPositionSmooth(posAbove+Vector(-8.19, 0.26, 10.16))
        box.shuffle()

        local deckDex = findDeck(bag)
        local deck = bag.takeObject({index=deckDex})
        deck.setPosition(self.getPosition()+Vector(6.57,2,-7.5))
        deck.setScale(Vector(2.32, 1.00, 2.32))
        deck.setRotation(Vector(0,180,180))
        deck.shuffle()
        Wait.frames(function()
            deck.shuffle()
            Wait.frames(function() deck.shuffle() end, 30)
        end, 30)

        Wait.condition(function() allSkills(box, setupBags, name, posAbove) end, function() return isSmooth(box) end)
    end, 3)
end

function allSkills(targetBox, setupBags, name, posAbove)
    local sourceBags = {source = {}, skill = {}}
    if allskills.on then
        for k, sourcebag in pairs(setupBags) do
            if not string.find(string.lower(sourcebag.getName()), string.lower(name), 1, false) then
                if allskills.custom.on then
                    local bag = sourcebag.takeObject({}); table.insert(destroyList, bag)
                    bag.setLock(true); enableCollider(bag, false)
                    table.insert(sourceBags.source, bag)
                else
                    for k, official in pairs(officialKnights) do
                        if not string.find(string.lower(official), string.lower(name), 1, false) then
                            if sourcebag.getName() == official then
                                local bag = sourcebag.takeObject({}); table.insert(destroyList, bag)
                                bag.setLock(true); enableCollider(bag, false)
                                table.insert(sourceBags.source, bag)
                            end
                        end
                    end
                end
            end
        end

        for k, bag in pairs(sourceBags.source) do
            local dex = findSkillBox(bag).index
            local skillBag = bag.takeObject({index=dex}); table.insert(destroyList, skillBag)
            skillBag.setLock(true); enableCollider(skillBag, false)
            table.insert(sourceBags.skill, skillBag)
        end

        local Y = Vector(0,3,0)
        for k, bag in pairs(sourceBags.skill) do
            Wait.frames(function()
                local contents = bag.getObjects()
                for k,v in pairs(contents) do
                    local skill = bag.takeObject({})
                    skill.setPosition(posAbove+Vector(0,3,0))
                    skill.setRotation(Vector(0, 180, 0))
                    skill.setPositionSmooth(targetBox.getPosition()+Y)
                    Y = Y + Vector(0,0.5,0)
                end
            end, 3)
        end

    end-- if allskills.on then
end

--******************************************************************************
--****** Tools *****************************************************************
--******************************************************************************

function objectsAreMoving(...)
    local args = {...}
    local objList = {}
    for k,var in pairs(args) do
        if type(var) == "table" then
            for k,v in pairs(var) do
                if v then
                    table.insert(objList, v)
                end
            end
        else
            if var then
                table.insert(objList, var)
            end
        end
    end
    --print(logString(objList, '\n---- objList'))
    for k, obj in pairs(objList) do
        if obj then
            if not isSmooth(obj) then return false end  -- Return false immediately if any value is false
        end
    end
    return true
end

function isSmooth(obj)
    if obj == nil then
        return true
    elseif not obj.isSmoothMoving() then
        return true
    end
    return false
end

function findDeck(bag)
    local contents = bag.getData().ContainedObjects
    local deckDex = false
    for k, obj in pairs(contents) do
        if obj.Name == "Deck" then
            return k-1
        end
    end
    return false
end

function findSkillBox(bag)
    local contents = bag.getObjects()
    local skillBag = {}
    for k, obj in pairs(contents) do
        for _, tag in pairs(obj.tags) do
            if tag == 'PlayerSkill_Bag' then
                --skillBag[obj] = true
                return obj
            end
        end
    end
    return nil
end

function enableCollider(obj, action) -- fasle or true
    if obj.getComponent("Rigidbody") then
        obj.getComponent("Rigidbody").set("detectCollisions", action)
    end
    if obj.getComponent("BoxCollider") then
        obj.getComponent("BoxCollider").set("enabled", action)
    end
end

function castZone(switch)
    switch = switch or false
    local data = {direction={0,1,0}, type=3, max_distance=0, debug=ShowDebug}

    if switch == 'chooseKnight' then
        data.offset = Vector(0, 0, 5)
        data.size = Vector(10,2,10)
        data.origin = self.getPosition() + data.offset
        return cast(switch, data)

    elseif switch == 'clearBoard' then
        data.offset = Vector(0, 1.04, 0)
        data.size = Vector(21.4,2,23.5) --21.4
        data.origin = self.getPosition() + data.offset
        return cast(switch, data)

    elseif switch == 'draw' then
        data.offset = Vector(6.5, 0, -7.4)
        data.size = Vector(2,2,2)
        data.origin = self.getPosition() + data.offset
        return cast(switch, data)

    elseif switch == 'discard' then
        data.offset = Vector(-6.5, 0, -7.4)
        data.size = Vector(2,2,2)
        data.origin = self.getPosition() + data.offset
        return cast(switch, data)
    end

end
--******************************************************************************
--****** CAST ******************************************************************
--******************************************************************************
function cast(switch, data)
    local zone = Physics.cast(data)

    if switch == 'chooseKnight' then
        for k, v in pairs(zone) do
            local obj = v.hit_object
            if obj.type == 'Deck' or obj.type == 'Card' then
                return obj
            end
        end

    elseif switch == 'clearBoard' then
        local z = {}
        for k, v in pairs(zone) do
            local obj = v.hit_object
            if not obj.hasTag('PlayerBoard_Dummy') then
                table.insert(z, obj)
            end
        end
        return z

    elseif switch == 'draw' or switch == 'discard' then
        for k, v in pairs(zone) do
            local obj = v.hit_object
            if obj.type == 'Deck' or obj.type == 'Card' then
                return obj
            end
        end
    end-- End Cast Switch

end

--******************************************************************************
--****** Buttons ***************************************************************
--******************************************************************************

function f_setSkills(obj, playerCol, alt_click)
    if allskills.on then --allskills = {on=false, color='Red', textcolor='White'}
        allskills.on = false
        allskills.color = 'Red'
        allskills.textcolor = 'White'
    else
        allskills.on = true
        allskills.color = 'Green'
        allskills.textcolor = 'White'
    end
    self.clearButtons()
    makeButtons()
end

function f_volkRandom(obj, playerCol, alt_click)
    if addVolkare.on then --allskills = {on=false, color='Red', textcolor='White'}
        addVolkare.on = false
        addVolkare.color = 'Red'
        addVolkare.textcolor = 'White'
    else
        addVolkare.on = true
        addVolkare.color = 'Green'
        addVolkare.textcolor = 'White'
    end
    self.clearButtons()
    makeButtons()
end

function f_setCustom(obj, playerCol, alt_click)
    if (not altClick) and Player[playerCol].admin then
        if allskills.custom.on then --allskills = {on=false, color='Red', textcolor='White'}
            allskills.custom.on = false
            allskills.custom.color = 'Red'
            allskills.custom.textcolor = 'White'
        else
            allskills.custom.on = true
            allskills.custom.color = 'Green'
            allskills.custom.textcolor = 'White'
        end
    end
    self.clearButtons()
    makeButtons()
end

function f_blank()end
function makeButtons(set)
    local buttons = {}

 -- DEFAULT START BUTTONS
    if set == nil then
        local button = {
                click_function = button1Data[b].click_function,
                function_owner = self,
                label = button1Data[b].label,
                position =  button1Data[b].pos,
                rotation = {0, 0, 0},
                width = button1Data[b].width,
                height = button1Data[b].height, --350,
                font_size = 200,
                scale = {0.2,0.2,0.2}}
        table.insert(buttons, button)

        button = {
                click_function = button2Data[b].click_function,
                function_owner = self,
                label = button2Data[b].label,
                position = button2Data[b].pos,
                rotation = {0, 0, 0},
                width = button2Data[b].width,
                height = button2Data[b].height,-- 350,
                font_size = 200,
                scale = {0.2,0.2,0.2}}
        table.insert(buttons, button)

        if b==1 then
            button = { -- width = 2800, height = 350, pos={0, 0.1, 1.19}}
                    click_function = 'f_setSkills',
                    function_owner = self,
                    label = 'All Skills',
                    position = {0.58, 0.1, 1.19}, --0.78
                    rotation = {0, 0, 0},
                    width = 950,
                    height = 350,
                    font_size = 200,
                    font_color=allskills.textcolor,
                    color=allskills.color,
                    scale = {0.2,0.2,0.2}}
            table.insert(buttons, button)

            button = {
                    click_function = 'f_volkRandom',
                    function_owner = self,
                    label = '+Volkare',
                    tooltip='Volkare can be randomly chosen.',
                    position = {0.39, 0.1, 1.03},
                    rotation = {0, 0, 0},
                    width = 1000,
                    height = 350,
                    font_size = 200,
                    font_color=addVolkare.textcolor,
                    color=addVolkare.color,
                    scale = {0.2,0.2,0.2}}
            table.insert(buttons, button)

            button = {
                    click_function = 'f_chooseVolkare',
                    function_owner = self,
                    label = 'Set Dummy to Volkare',
                    position = {0, 0.1, 1.35},
                    rotation = {0, 0, 0},
                    width = 2500,
                    height = 350,
                    font_size = 200,
                    font_color='Black',
                    color='White',
                    scale = {0.2,0.2,0.2}}
            table.insert(buttons, button)

            if allskills.on then
                button = {
                    click_function = 'f_setCustom',
                    function_owner = self,
                    label = '+Custom',
                    position = {0.98, 0.1, 1.19},
                    rotation = {0, 0, 0},
                    width = 950,
                    height = 350,
                    font_size = 200,
                    font_color=allskills.custom.textcolor,
                    color=allskills.custom.color,
                    scale = {0.2,0.2,0.2}}
                    table.insert(buttons, button)
            end
        end
    end
 -- Create Buttons
    for _, button in ipairs(buttons) do
        self.createButton(button)
    end
end
