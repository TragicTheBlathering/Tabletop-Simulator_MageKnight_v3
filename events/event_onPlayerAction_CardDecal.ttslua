local cardDecal = {}
local ShowDebug = false

    function cardDecal.setDecal(player, action, targets)
        local cardList = setOnlyCardsDecks(targets)
        if tableSize(cardList) > 0 then
            checkDecals(cardList)
        end
    end

    function addDecalOnObject(obj, rot, decal)
        --print('Inside WTF?!')
        local faceDown = true
        if rot.z < 350 and rot.z > 5 then
            faceDown = false
        end

        if faceDown then
            --print('!!!')
            obj.setDecals({decal})
            obj.memo = setDiscardFlag(obj, true) -- true means "Add" memo, flase means clear memo
        else
            obj.setDecals({})
            obj.memo = setDiscardFlag(obj)
        end
    end

    function checkDecals(cardList)
        local testLines = require("/MageKnightV3/GlobalVariables").testDropPositions
        local decal = require("/MageKnightV3/GlobalVariables").ThrowAwayDecals

        for k, obj in pairs(cardList) do
            local pos = obj.getPosition()
            local rot = obj.getRotation()
            if isPositionBetween(pos, testLines) then
                --print('FLIP : INSIDE')
                addDecalOnObject(obj, rot, decal)
            else
                --print('FLIP : OUTSIDE')
                obj.setDecals({})
                obj.memo = setDiscardFlag(obj)
            end
        end
    end

    function isPositionBetween(pos, testLines)
        local allFalse = false
        if pos.z < testLines.height.h1 and pos.z > testLines.height.h2 then
            for _, points in pairs(testLines) do
                if points and type(points) == "table" then
                    if points.p1 and points.p2 then
                        allFalse = true
                        if (pos.x > points.p1 and pos.x < points.p2) or
                        (pos.x > points.p2 and pos.x < points.p1) then
                            return false
                        end
                    end
                end
            end
        else
            return false
        end
        return allFalse
    end

--if isBetween(v.p1, v.p2, pos.x) then
function setOnlyCardsDecks(targets)
    local z = {}
    for k,v in pairs(targets) do
        if v.type == 'Card' or v.type == 'Deck' then
            table.insert(z, v)
        end
    end
    return z
end

function isBetween(n1, n2, test)
    local min, max = math.min(n1, n2), math.max(n1, n2)
    return test > min and test < max
end

-- Table Size ------------------------------------------------------------------
function tableSize(t)
    local count = 0
    if t ~= nil then
        for key,value in pairs(t) do count = count + 1 end
    end
    return count
end

return cardDecal
