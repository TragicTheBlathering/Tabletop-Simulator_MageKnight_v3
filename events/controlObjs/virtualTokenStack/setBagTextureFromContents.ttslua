local setBagTextureFromContents = {}
local dprint = require("/_libs/debug/dPrint").dprint
local editBag = {}
local tool = {}
            tool.hex2Col=require("/_libs/colourUtils/colourUtils").hexToRgb
            tool.tablesize=require("/_libs/tableUtils/tableUtils").tableSize
            tool.commonTag=require("/_libs/tagUtils/tagUtils").returnTagsfoundinTagList
            tool.foundTag=require("/_libs/tagUtils/tagUtils").tagIsFoundOnAllObjectsInBag
            tool.tablesize=require("/_libs/tableUtils/tableUtils").tableSize

            tool.buildVariable=require("MageKnightV3/events/controlObjs/virtualTokenStack/phraseVariable").buildVariables

local errorTint = {0.9607843, 0.2235294, 0.2235294} -- '#F53939'

function setBagTextureFromContents.usingTint(bag, bagData, value)
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    if contentCount > 0 then
        bag.setColorTint('White')
    else
        bag.setColorTint(hexToRGB(value.empty))
    end
end

function setBagTextureFromContents.usingContentsOfBag(bag, bagData, value)
    --dprint('setBagTextureFromContents.usingContentsOfBag(bag, bagData, value)')
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()

    if contentCount > 0 then
        local topOBJ = bagData.ContainedObjects[contentCount]
        local newImage = nil

        if topOBJ.Name == "Custom_Tile" then
            newImage = topOBJ.CustomImage.ImageURL
        elseif topOBJ.Name == "Custom_Model" then
            newImage = topOBJ.CustomMesh.DiffuseURL
        end

        bag.setCustomObject({diffuse=newImage})
        bag.setColorTint('White')

        Wait.frames(function() bag.reload() end, 1)
    else
        local newImage = value.tags[value.tagID[1]]
        if string.find(string.lower(value.empty), string.lower('http'), 1, true) then
            newImage = value.empty
        else
            bag.setColorTint(hexToRGB(value.empty))
        end
        --
        bag.setCustomObject({diffuse=newImage})

        Wait.frames(function() bag.reload() end, 1)
    end
end

function setBagTextureFromContents.usingURLs(bag, bagData, value)
    dprint('setBagTextureFromContents.usingURLs(bag, bagData, value)')
    dprint(value.tags)
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()

    if contentCount > 0 then
        local topOBJ = bagData.ContainedObjects[contentCount]
        local newImage = nil

        if topOBJ.Name == "Custom_Tile" then
            newImage = topOBJ.CustomImage.ImageURL
        elseif topOBJ.Name == "Custom_Model" then
            newImage = topOBJ.CustomMesh.DiffuseURL
        end

        bag.setCustomObject({diffuse=newImage})
        bag.setColorTint('White')

        Wait.frames(function() bag.reload() end, 1)
    else
        local newImage = value.tags[value.tagID[1]]
        if string.find(string.lower(value.empty), string.lower('http'), 1, true) then
            newImage = value.empty
        else
            bag.setColorTint(hexToRGB(value.empty))
        end
        --
        bag.setCustomObject({diffuse=newImage})

        Wait.frames(function() bag.reload() end, 1)
    end

end


function hexToRGB(hex)
    hex = hex:gsub("#", "")  -- Remove the hash character if present

    local r = tonumber(hex:sub(1, 2), 16) / 255
    local g = tonumber(hex:sub(3, 4), 16) / 255
    local b = tonumber(hex:sub(5, 6), 16) / 255

    return {r, g, b}
end
--[[


function setBagTextureFromContents.simulateTokenStack(bag, value)
    local value = tool.buildVariable(bag, value)
    if value.type.hex then
        --dprint('Use Hex Colour Only')

    elseif value.type.url then
        --dprint('Use URL')

    elseif value.type.contents then
        --dprint('Contents')
        editBag.useObjTexture(bag, value)
    end
end

function editBag.useObjTexture(bag, data)
    dprint('data', data)
    --bag.setColorTint(value.hexWhite)
    local bagData = bag.getData()
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()
    local inValidObjectFound = false

    if contentCount > 0 then
        local topOBJ = bagData.ContainedObjects[contentCount]
        local newImage = nil

        if topOBJ.Name == "Custom_Tile" then
            if value.upsideDownBag then
                dprint("Custom_Tile")
            else
                dprint("NOT Custom_Tile")
                newImage = topOBJ.CustomImage.ImageURL
                bag.setColorTint('White')
            end

        elseif topOBJ.Name == "Custom_Model" then
            dprint("Custom_Model")
            --print(logString(topOBJ.CustomMesh.DiffuseURL))
            newImage = topOBJ.CustomMesh.DiffuseURL
            bag.setColorTint('White')
        end

        bag.setCustomObject({diffuse=newImage})
        Wait.frames(function() bag.reload() end, 1)
    end

end

--[[
l

function setBagTextureFromContents.simulateTokenStack(bag, value)
    --print("----- function setBagTextureFromContents.simulateTokenStack(bag, value)")
    --print(logString(value))
    local value = tool.buildVariable(bag, value)
    if value.type.hex then
        dprint('value.type.hex')
        changeBagTexture_hex(bag, value)

    elseif value.type.url then
        dprint('value.type.url')
        changeBagTexture_specificURLs(bag, value)

    elseif value.type.contents then
        dprint('value.type.contents')
        changeBagTexture_useTetxureOfTopObjectInBag(bag, value)
    end

end

function changeBagTexture_useTetxureOfTopObjectInBag(bag, value)
    --print("----- USE OBJECT TEXTURE")
    local bagData = bag.getData()
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()
    local matchingTag = false

    if contentCount > 0 then
        local topOBJ = bagData.ContainedObjects[contentCount]
        local newImage = nil

        --This needs to handle the various custom Objects... Mesh, Tile, Token etc etc
        -- I'm adding them as my mods need them.
        --print(topOBJ.Name)
        if topOBJ.Name == "Custom_Tile" then
            if value.upsideDownBag then
                --print("USE BOTTOM IMAGE")
            else
                newImage = topOBJ.CustomImage.ImageURL
                bag.setColorTint('White')
            end

        elseif topOBJ.Name == "Custom_Model" then
            --print(logString(topOBJ.CustomMesh.DiffuseURL))
            newImage = topOBJ.CustomMesh.DiffuseURL
            bag.setColorTint('White')
        end
        bag.setCustomObject({diffuse=newImage})

        --matchThisTag = tool.commonTag(value.tags, bagData.ContainedObjects[contentCount].Tags)
    else
        local matchingTag = tool.commonTag(value.tags, bagData.Tags, true)
        --print(logString(value))
        if string.find(string.lower(value.empty.url), string.lower('http')) then
          bag.setCustomObject({diffuse=value.empty.url})
        else
          bag.setColorTint(value.empty.hex)
        end
        bag.setCustomObject({diffuse=value.tags[matchingTag]})
    end
    bag.reload()
end

function changeBagTexture_specificURLs(bag, value)
    --print("----- USE SPESIFIC URLS")
    local bagData = bag.getData()
    local contentCount = tool.tablesize(bagData.ContainedObjects)
    local bagTags = bag.getTags()
    local matchingTag = false

    if contentCount > 0 then
        local matchingTag = tool.commonTag(value.tags, bagData.ContainedObjects[contentCount].Tags, true)
        --print(matchingTag)
        bag.setCustomObject({diffuse=value.tags[matchingTag]})
    else
        bag.setCustomObject({diffuse=value.empty.url})
    end
    bag.reload()
end

function changeBagTexture_hex(bag, value)
    --print("----- USE HEX COLOUR")
    local contents = bag.getObjects()
    local bagTags = bag.getTags()

    local matchingTag = false
    if #contents > 0 then
        local matchingTag = tool.commonTag(value.tags, bagTags, true)
        if tool.foundTag(matchingTag, contents) then
            bag.setColorTint(value.tags[matchingTag])
        else
            bag.setColorTint(errorTint)
        end
    else
        bag.setColorTint(value.empty.hex)
    end
end
]]
return setBagTextureFromContents
